/**
 * Blink the default LED on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  threading: false
}

import GyroControl from "ControlGyro.lf"

preamble {=
  #include <stdio.h>
  #include <pico/stdlib.h>
  #include <hardware/uart.h>
  #include <hardware/gpio.h>

  #define UART_ID uart0
  #define BAUD_RATE 9600

  #define UART_TX_PIN 28
  #define UART_RX_PIN 29
=}

main reactor {
  preamble {=
    const static float SPEED_VAL = 0.2f;
  =}
  timer t(10 ms, 10 ms)
  gc = new GyroControl()
  state prev_speed: float = 0

  reaction(startup) {=
    // Initialize standard input/output
    stdio_init_all();

    // Set up UART with the required baud rate.
    uart_init(UART_ID, BAUD_RATE);

    // Set the TX and RX pins by using the function from the GPIO library
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
  =}

  reaction(t) -> gc.vehicle_speed, gc.turn_left, gc.turn_right {=

    // Buffer for incoming data
    uint8_t buffer[256];

    if (uart_is_readable(UART_ID)) {
        int len = uart_is_readable(UART_ID);
        uart_read_blocking(UART_ID, buffer, len);

        if (buffer[0] == 'w') {
          lf_set(gc.vehicle_speed, SPEED_VAL);
          self->prev_speed = SPEED_VAL;
          lf_set(gc.turn_left, false);
          lf_set(gc.turn_right, false);
        } else if (buffer[0] == 'a') {
          lf_set(gc.vehicle_speed, self->prev_speed);
          lf_set(gc.turn_left, true);
          lf_set(gc.turn_right, false);
        } else if (buffer[0] == 's') {
          lf_set(gc.vehicle_speed, -SPEED_VAL);
          self->prev_speed = -SPEED_VAL;
          lf_set(gc.turn_left, false);
          lf_set(gc.turn_right, false);
        } else if (buffer[0] == 'd') {
          lf_set(gc.vehicle_speed, self->prev_speed);
          lf_set(gc.turn_left, false);
          lf_set(gc.turn_right, true);
        } else {
          lf_set(gc.vehicle_speed, 0.0f);
          self->prev_speed = 0.0f;
          lf_set(gc.turn_left, false);
          lf_set(gc.turn_right, false);
        }

        uart_write_blocking(UART_ID, buffer, len); // Echo back what was received
        memset(buffer, 0, sizeof buffer);
    }
  =}
}
